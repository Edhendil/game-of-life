{"version":3,"sources":["app.module.js","app/game/Brush.js","gameOfLife.min.js","app/game/LifeState.js","app/game/RuleSet.js","app/game/arrayUtils.service.js","app/game/brushFactory.service.js","app/game/canvas.service.js","app/game/frameRate.service.js","app/game/game.controller.js","app/game/game.routes.js","app/game/gameStateFactory.service.js","app/game/range.filter.js"],"names":["app","angular","module","config","$locationProvider","html5Mode","Brush","arrayUtils","size","this","pattern","makeArray","$inject","factory","LifeState","data","width","height","lifeData","build","newLife","prototype","updateLife","rules","i","j","newState","newValue","neighbours","countNeighbours","getField","survive","create","setField","x","y","value","counter","countLive","liveCount","countDead","count","RuleSet","empty","makeArray1","parseText","rulesText","rulePart","length","current","charAt","parsedInt","parseInt","ArrayUtils","w","h","val","arr","BrushFactory","square","brush","eraser","cross","missile","custom","CanvasService","setBlack","index","setWhite","canvas","ctx","offscreenCanvas","offscreenCtx","canvasId","init","document","getElementById","getContext","imageSmoothingEnabled","resize","updateCanvas","lifeState","$","attr","imageData","createImageData","putImageData","scale","drawImage","setTransform","getMousePos","evt","rect","getBoundingClientRect","clientX","left","clientY","top","FrameRateService","frameEndTimes","frameCountLimit","reset","frameEndTime","Date","getTime","push","next","newEndTime","shift","Math","floor","GameController","$scope","$interval","gameStateFactory","canvasService","frameRateService","brushFactory","gameState","createEmptyState","gameWidth","gameHeight","canvasWidth","canvasHeight","setRulesByName","self","availableBrushes","ruleSetName","textRules","availableRules","ruleSet","selectedRules","canvasBrushPaint","position","paint","start","fps","gameRunning","intervalId","step","stop","isDefined","cancel","undefined","realFps","setLifeData","detectLeftButton","buttons","which","detectRightButton","scaledSize","brushScale","baseX","baseY","patternX","patternY","stateX","stateY","tickerButtonText","availableStates","line","createLineState","random","createRandomState","conway","seed","ameba","daynight","longlife","coral","34","diameba","highlife","replicator","labirynth","cancer","petals","wolfram","traycloth","coagulation","pseudolife","selectedRuleSet","selectedBrush","selectedState","handleFpsChange","loadRulePreset","ruleText","handleSetStateButton","handleTickerButton","handleCanvasClick","e","pos","handleCanvasMove","performStep","changeBrush","event","ctrlKey","brushMoveChange","loadBrush","controller","$stateProvider","$urlRouterProvider","otherwise","state","url","templateUrl","GameStateFactory","rangeFilter","n","res","filter"],"mappings":"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","file":"gameOfLife.min.js","sourcesContent":["//setup module and external dependencies\nvar app = angular.module('gameOfLife', [\n    'ui.router',\n    'templates'\n]);\n\napp.config(function($locationProvider) {\n    $locationProvider.html5Mode(true);\n});","function Brush(arrayUtils) {\n\n    function Brush(size) {\n        this.size = size;\n        this.pattern = arrayUtils.makeArray(size, size, null);\n    }\n\n    return Brush;\n\n}\n\nangular.module('gameOfLife')\n    .factory('Brush', Brush);","!(function() { //setup module and external dependencies\nvar app = angular.module('gameOfLife', [\n    'ui.router',\n    'templates'\n]);\n\napp.config([\"$locationProvider\", function($locationProvider) {\n    $locationProvider.html5Mode(true);\n}]);\n}());\n!(function() { \nBrush.$inject = [\"arrayUtils\"];function Brush(arrayUtils) {\n\n    function Brush(size) {\n        this.size = size;\n        this.pattern = arrayUtils.makeArray(size, size, null);\n    }\n\n    return Brush;\n\n}\n\nangular.module('gameOfLife')\n    .factory('Brush', Brush);\n}());\n!(function() { \nLifeState.$inject = [\"arrayUtils\"];function LifeState(arrayUtils) {\n\n    function LifeState(data, width, height) {\n        this.lifeData = data;\n        this.width = width;\n        this.height = height;\n    }\n\n    LifeState.build = function(width, height) {\n        var newLife = arrayUtils.makeArray(width + 2, height + 2, false);\n        return new LifeState(newLife, width, height);\n    };\n\n    LifeState.prototype.updateLife = function(rules) {\n        var newState = LifeState.build(this.width, this.height);\n        var i, j;\n        for (i = 0; i < this.width; i++) {\n            for (j = 0; j < this.height; j++) {\n                var neighbours = this.countNeighbours(i, j);\n                var newValue;\n                if (this.getField(i, j)) {\n                    newValue = rules.survive[neighbours];\n                } else {\n                    newValue = rules.create[neighbours];\n                }\n                newState.setField(i, j, newValue);\n            }\n        }\n        return newState;\n    };\n\n    LifeState.prototype.getField = function(x, y) {\n        return this.lifeData[x + 1][y + 1];\n    };\n\n    LifeState.prototype.setField = function(x, y, value) {\n        this.lifeData[x + 1][y + 1] = value;\n    };\n\n    LifeState.prototype.countNeighbours = function(x, y) {\n        var counter = 0;\n        x++;\n        y++;\n        if (this.lifeData[x - 1][y]) {\n            counter++;\n        }\n        if (this.lifeData[x + 1][y]) {\n            counter++;\n        }\n        if (this.lifeData[x][y - 1]) {\n            counter++;\n        }\n        if (this.lifeData[x - 1][y - 1]) {\n            counter++;\n        }\n        if (this.lifeData[x + 1][y - 1]) {\n            counter++;\n        }\n        if (this.lifeData[x][y + 1]) {\n            counter++;\n        }\n        if (this.lifeData[x - 1][y + 1]) {\n            counter++;\n        }\n        if (this.lifeData[x + 1][y + 1]) {\n            counter++;\n        }\n        return counter;\n    };\n\n    LifeState.prototype.countLive = function() {\n        var i, j;\n        var liveCount = 0;\n        for (i = 0; i < this.width; i++) {\n            for (j = 0; j < this.height; j++) {\n                if (this.getField(i, j)) {\n                    liveCount++;\n                }\n            }\n        }\n        return liveCount;\n    };\n\n    LifeState.prototype.countDead = function() {\n        return this.count() - this.countLive();\n    };\n\n    LifeState.prototype.count = function() {\n        return this.width * this.height;\n    };\n\n    return LifeState;\n\n}\n\nangular.module('gameOfLife')\n    .factory('LifeState', LifeState);\n}());\n!(function() { \nRuleSet.$inject = [\"arrayUtils\"];function RuleSet(arrayUtils) {\n\n    function RuleSet(survive, create) {\n        this.survive = survive;\n        this.create = create;\n    }\n\n    RuleSet.empty = function() {\n        return new RuleSet(arrayUtils.makeArray1(10, false), arrayUtils.makeArray1(10, false));\n    };\n\n    RuleSet.parseText = function(rulesText) {\n        var rules = RuleSet.empty();\n        var rulePart = rules.survive;\n        var i;\n        for (i = 0; i < rulesText.length; i++) {\n            var current = rulesText.charAt(i);\n            if (current === '/') {\n                rulePart = rules.create;\n            } else {\n                var parsedInt = parseInt(current);\n                rulePart[parsedInt] = true;\n            }\n        }\n        return rules;\n    };\n\n    return RuleSet;\n\n}\n\nangular.module('gameOfLife')\n    .factory('RuleSet', RuleSet);\n}());\n!(function() { function ArrayUtils() {\n\n    return {\n\n        makeArray: function(w, h, val) {\n            var arr = [];\n            var i, j;\n            for (i = 0; i < w; i++) {\n                arr[i] = [];\n                for (j = 0; j < h; j++) {\n                    arr[i][j] = val;\n                }\n            }\n            return arr;\n        },\n\n        makeArray1: function(size, value) {\n            var arr = [];\n            var i;\n            for (i = 0; i < size; i++) {\n                arr[i] = value;\n            }\n            return arr;\n        }\n\n    };\n\n}\n\nangular.module('gameOfLife')\n    .factory('arrayUtils', ArrayUtils);\n}());\n!(function() { \nBrushFactory.$inject = [\"Brush\", \"arrayUtils\"];function BrushFactory(Brush, arrayUtils) {\n\n    return {\n        square: function() {\n            var brush = new Brush(11);\n            brush.pattern[5][5] = true;\n            return brush;\n        },\n        eraser: function() {\n            var brush = new Brush(11);\n            brush.pattern[5][5] = false;\n            return brush;\n        },\n        cross: function() {\n            var brush = new Brush(11);\n            brush.pattern[5][4] = true;\n            brush.pattern[4][5] = true;\n            brush.pattern[5][5] = true;\n            brush.pattern[6][5] = true;\n            brush.pattern[5][6] = true;\n            return brush;\n        },\n        missile: function() {\n            var brush = new Brush(11);\n            brush.pattern[6][6] = true;\n            brush.pattern[6][5] = true;\n            brush.pattern[6][4] = true;\n            brush.pattern[5][4] = true;\n            brush.pattern[4][5] = true;\n            return brush;\n        },\n        custom: function() {\n            return new Brush(11);\n        }\n    };\n\n}\n\nangular.module('gameOfLife')\n    .factory('brushFactory', BrushFactory);\n}());\n!(function() { function CanvasService() {\n\n    var canvasId = 'lifeStage';\n\n    var canvas;\n    var ctx;\n\n    var offscreenCanvas;\n    var offscreenCtx;\n\n    function setBlack(data, x, y) {\n        var index = (y * data.width + x) * 4;\n        data.data[index] = 0;\n        data.data[index + 1] = 0;\n        data.data[index + 2] = 0;\n        data.data[index + 3] = 255;\n    }\n\n    function setWhite(data, x, y) {\n        var index = (y * data.width + x) * 4;\n        data.data[index] = 255;\n        data.data[index + 1] = 255;\n        data.data[index + 2] = 255;\n        data.data[index + 3] = 255;\n    }\n\n    return {\n        init: function(width, height) {\n            canvas = document.getElementById(canvasId);\n            canvas.width = width;\n            canvas.height = height;\n            ctx = canvas.getContext('2d');\n            ctx.imageSmoothingEnabled = false;\n        },\n        resize: function(width, height) {\n            canvas.width = width;\n            canvas.height = height;\n        },\n        updateCanvas: function(lifeState) {\n            offscreenCanvas = $('<canvas>')\n                .attr('width', lifeState.width)\n                .attr('height', lifeState.height)[0];\n            offscreenCtx = offscreenCanvas.getContext('2d');\n            var imageData = offscreenCtx.createImageData(lifeState.width, lifeState.height);\n            var i, j;\n            for (i = 0; i < lifeState.width; i++) {\n                for (j = 0; j < lifeState.height; j++) {\n                    if (lifeState.getField(i, j)) {\n                        setBlack(imageData, i, j);\n                    } else {\n                        setWhite(imageData, i, j);\n                    }\n                }\n            }\n            offscreenCtx.putImageData(imageData, 0, 0);\n            ctx.scale(canvas.width / lifeState.width, canvas.height / lifeState.height);\n            ctx.drawImage(offscreenCanvas, 0, 0);\n            ctx.setTransform(1, 0, 0, 1, 0, 0);\n        },\n        getMousePos: function(evt) {\n            var rect = canvas.getBoundingClientRect();\n            return {\n                x: evt.clientX - rect.left,\n                y: evt.clientY - rect.top\n            };\n        }\n    };\n}\n\nangular.module('gameOfLife')\n    .factory('canvasService', CanvasService);\n}());\n!(function() { function FrameRateService() {\n\n    var frameCountLimit = 30;\n\n    var frameEndTimes;\n\n    return {\n        reset: function() {\n            frameEndTimes = [];\n            var frameEndTime = new Date()\n                .getTime();\n            frameEndTimes.push(frameEndTime);\n        },\n        next: function() {\n            var newEndTime = new Date()\n                .getTime();\n            frameEndTimes.push(newEndTime);\n            if (frameEndTimes.length > frameCountLimit) {\n                frameEndTimes.shift();\n            }\n            return Math.floor(1 / ((newEndTime - frameEndTimes[0]) / 1000) * frameEndTimes.length);\n        }\n    };\n\n}\n\nangular.module('gameOfLife')\n    .factory('frameRateService', FrameRateService);\n}());\n!(function() { \nGameController.$inject = [\"$scope\", \"$interval\", \"gameStateFactory\", \"canvasService\", \"RuleSet\", \"frameRateService\", \"brushFactory\"];function GameController($scope, $interval, gameStateFactory, canvasService, RuleSet, frameRateService, brushFactory) {\n\n    var self = this;\n\n    var intervalId;\n\n    var canvasWidth = 512;\n    var canvasHeight = 512;\n\n    var gameWidth = 256;\n    var gameHeight = 256;\n\n    self.selectedRules = null;\n\n    self.tickerButtonText = 'Start';\n\n    self.fps = 25;\n    self.realFps = 0;\n\n    self.brush = null;\n    self.brushScale = 1;\n\n    self.gameRunning = false;\n\n    self.availableStates = {\n        empty: gameStateFactory.createEmptyState,\n        line: gameStateFactory.createLineState,\n        random: gameStateFactory.createRandomState\n    };\n    self.availableRules = {\n        conway: '23/3',\n        seed: '/2',\n        ameba: '1358/357',\n        daynight: '34678/3678',\n        longlife: '5/345',\n        coral: '45678/3',\n        '34': '34/34',\n        diameba: '5678/35678',\n        highlife: '23/36',\n        replicator: '1357/1357',\n        labirynth: '12345/3',\n        cancer: '1/1',\n        petals: '012345678/3',\n        wolfram: '018/018',\n        traycloth: '/234',\n        coagulation: '235678/378',\n        pseudolife: '238/357'\n    };\n    self.availableBrushes = {\n        eraser: brushFactory.eraser,\n        square: brushFactory.square,\n        cross: brushFactory.cross,\n        missile: brushFactory.missile,\n        custom: brushFactory.custom\n    };\n    self.selectedRuleSet = 'conway';\n    self.selectedBrush = 'custom';\n    self.selectedState = 'empty';\n\n    var gameState = null;\n\n    init();\n\n    function init() {\n        gameState = gameStateFactory.createEmptyState(gameWidth, gameHeight);\n        canvasService.init(canvasWidth, canvasHeight);\n        canvasService.updateCanvas(gameState);\n        setRulesByName('conway');\n        self.brush = self.availableBrushes['custom']();\n    }\n\n    function setRulesByName(ruleSetName) {\n        var textRules = self.availableRules[ruleSetName];\n        var ruleSet = RuleSet.parseText(textRules);\n        self.selectedRules = ruleSet;\n    }\n\n    self.handleFpsChange = function() {\n        if (intervalId !== undefined) {\n            stop();\n            start(self.fps);\n        }\n    };\n\n    self.loadRulePreset = function() {\n        var ruleText = self.availableRules[self.selectedRuleSet];\n        self.selectedRules = RuleSet.parseText(ruleText);\n    };\n\n    self.handleSetStateButton = function() {\n        var factory = self.availableStates[self.selectedState];\n        setLifeData(factory(gameWidth, gameHeight));\n    };\n\n    self.handleTickerButton = function() {\n        if (intervalId !== undefined) {\n            stop();\n            self.tickerButtonText = 'Start';\n        } else {\n            start(self.fps);\n            self.tickerButtonText = 'Stop';\n        }\n    };\n\n    self.handleCanvasClick = function(e) {\n        var pos = canvasService.getMousePos(e);\n        canvasBrushPaint(pos);\n    };\n\n    self.handleCanvasMove = function(e) {\n        if (detectLeftButton(e)) {\n            var pos = canvasService.getMousePos(e);\n            canvasBrushPaint(pos);\n        }\n    };\n\n    function canvasBrushPaint(position) {\n        var x = Math.floor(parseInt(position.x) * (gameWidth / canvasWidth));\n        var y = Math.floor(parseInt(position.y) * (gameHeight / canvasHeight));\n        paint(gameState, x, y, self.brush);\n        canvasService.updateCanvas(gameState);\n    }\n\n    self.performStep = function() {\n        gameState = gameState.updateLife(self.selectedRules);\n        canvasService.updateCanvas(gameState);\n    };\n\n    self.changeBrush = function(event, x, y) {\n        if (detectLeftButton(event) && event.ctrlKey) {\n            self.brush.pattern[x][y] = null;\n        } else if (detectRightButton(event)) {\n            self.brush.pattern[x][y] = false;\n        } else if (detectLeftButton(event)) {\n            self.brush.pattern[x][y] = true;\n        }\n    };\n\n    self.brushMoveChange = function(event, x, y) {\n        self.changeBrush(event, x, y);\n    };\n\n    self.loadBrush = function() {\n        self.brush = self.availableBrushes[self.selectedBrush]();\n    };\n\n    function start(fps) {\n        frameRateService.reset();\n        self.gameRunning = true;\n        intervalId = $interval(step, 1000 / fps);\n    }\n\n    function stop() {\n        if (angular.isDefined(intervalId)) {\n            self.gameRunning = false;\n            $interval.cancel(intervalId);\n            intervalId = undefined;\n        }\n        self.realFps = 0;\n    }\n\n    function step() {\n        setLifeData(gameState.updateLife(self.selectedRules));\n        self.realFps = frameRateService.next();\n    }\n\n    function setLifeData(data) {\n        gameState = data;\n        canvasService.updateCanvas(data);\n    }\n\n    function detectLeftButton(evt) {\n        if (evt.buttons !== undefined) {\n            return evt.buttons === 1;\n        }\n        return evt.which === 1;\n    }\n\n    function detectRightButton(evt) {\n        if (evt.buttons !== undefined) {\n            return evt.buttons === 2;\n        }\n        return evt.which === 3;\n    }\n\n    function paint(lifeState, x, y, brush) {\n        var scaledSize = brush.size * self.brushScale;\n        var baseX = x - Math.floor(scaledSize / 2);\n        var baseY = y - Math.floor(scaledSize / 2);\n        var i, j;\n        for (i = 0; i < scaledSize; i++) {\n            for (j = 0; j < scaledSize; j++) {\n                var patternX = Math.floor(i / self.brushScale);\n                var patternY = Math.floor(j / self.brushScale);\n                var stateX = baseX + i;\n                var stateY = baseY + j;\n                if (stateX > -1 && stateX < lifeState.width && stateY > -1 && stateY < lifeState.height) {\n                    if (brush.pattern[patternX][patternY] != null) {\n                        lifeState.setField(stateX, stateY, brush.pattern[patternX][patternY]);\n                    }\n                }\n            }\n        }\n    }\n\n}\n\nangular.module('gameOfLife')\n    .controller('GameController', GameController);\n}());\n!(function() { /* Setup Rounting For All Pages */\nangular.module('gameOfLife')\n    .config([\"$stateProvider\", \"$urlRouterProvider\", function($stateProvider, $urlRouterProvider) {\n\n        // Redirect any unmatched url\n        $urlRouterProvider.otherwise('/');\n\n        $stateProvider\n            .state('game', {\n                url: '/',\n                templateUrl: 'game/game.html',\n                controller: 'GameController as gameController'\n            });\n\n    }]);\n}());\n!(function() { \nGameStateFactory.$inject = [\"LifeState\", \"arrayUtils\"];function GameStateFactory(LifeState, arrayUtils) {\n    return {\n        createEmptyState: function(width, height) {\n            return new LifeState(arrayUtils.makeArray(width + 2, height + 2, false), width, height);\n        },\n        createLineState: function(width, height) {\n            var state = arrayUtils.makeArray(width + 2, height + 2, false);\n            var i;\n\n            for (i = 1; i < width + 1; i++) {\n                state[i][i] = true;\n            }\n            // state[201][202] = true;\n            return new LifeState(state, width, height);\n        },\n        createRandomState: function(width, height) {\n            var state = LifeState.build(width, height);\n            var i, j;\n            for (i = 0; i < width; i++) {\n                for (j = 0; j < height; j++) {\n                    state.setField(i, j, Math.random() < 0.5);\n                }\n            }\n            return state;\n        }\n    };\n}\n\nangular.module('gameOfLife')\n    .factory('gameStateFactory', GameStateFactory);\n}());\n!(function() { function rangeFilter() {\n    return function(n) {\n        var res = [];\n        for (var i = 0; i < n; i++) {\n            res.push(i);\n        }\n        return res;\n    };\n}\n\nangular.module('gameOfLife')\n    .filter('range', rangeFilter);\n}());","function LifeState(arrayUtils) {\n\n    function LifeState(data, width, height) {\n        this.lifeData = data;\n        this.width = width;\n        this.height = height;\n    }\n\n    LifeState.build = function(width, height) {\n        var newLife = arrayUtils.makeArray(width + 2, height + 2, false);\n        return new LifeState(newLife, width, height);\n    };\n\n    LifeState.prototype.updateLife = function(rules) {\n        var newState = LifeState.build(this.width, this.height);\n        var i, j;\n        for (i = 0; i < this.width; i++) {\n            for (j = 0; j < this.height; j++) {\n                var neighbours = this.countNeighbours(i, j);\n                var newValue;\n                if (this.getField(i, j)) {\n                    newValue = rules.survive[neighbours];\n                } else {\n                    newValue = rules.create[neighbours];\n                }\n                newState.setField(i, j, newValue);\n            }\n        }\n        return newState;\n    };\n\n    LifeState.prototype.getField = function(x, y) {\n        return this.lifeData[x + 1][y + 1];\n    };\n\n    LifeState.prototype.setField = function(x, y, value) {\n        this.lifeData[x + 1][y + 1] = value;\n    };\n\n    LifeState.prototype.countNeighbours = function(x, y) {\n        var counter = 0;\n        x++;\n        y++;\n        if (this.lifeData[x - 1][y]) {\n            counter++;\n        }\n        if (this.lifeData[x + 1][y]) {\n            counter++;\n        }\n        if (this.lifeData[x][y - 1]) {\n            counter++;\n        }\n        if (this.lifeData[x - 1][y - 1]) {\n            counter++;\n        }\n        if (this.lifeData[x + 1][y - 1]) {\n            counter++;\n        }\n        if (this.lifeData[x][y + 1]) {\n            counter++;\n        }\n        if (this.lifeData[x - 1][y + 1]) {\n            counter++;\n        }\n        if (this.lifeData[x + 1][y + 1]) {\n            counter++;\n        }\n        return counter;\n    };\n\n    LifeState.prototype.countLive = function() {\n        var i, j;\n        var liveCount = 0;\n        for (i = 0; i < this.width; i++) {\n            for (j = 0; j < this.height; j++) {\n                if (this.getField(i, j)) {\n                    liveCount++;\n                }\n            }\n        }\n        return liveCount;\n    };\n\n    LifeState.prototype.countDead = function() {\n        return this.count() - this.countLive();\n    };\n\n    LifeState.prototype.count = function() {\n        return this.width * this.height;\n    };\n\n    return LifeState;\n\n}\n\nangular.module('gameOfLife')\n    .factory('LifeState', LifeState);","function RuleSet(arrayUtils) {\n\n    function RuleSet(survive, create) {\n        this.survive = survive;\n        this.create = create;\n    }\n\n    RuleSet.empty = function() {\n        return new RuleSet(arrayUtils.makeArray1(10, false), arrayUtils.makeArray1(10, false));\n    };\n\n    RuleSet.parseText = function(rulesText) {\n        var rules = RuleSet.empty();\n        var rulePart = rules.survive;\n        var i;\n        for (i = 0; i < rulesText.length; i++) {\n            var current = rulesText.charAt(i);\n            if (current === '/') {\n                rulePart = rules.create;\n            } else {\n                var parsedInt = parseInt(current);\n                rulePart[parsedInt] = true;\n            }\n        }\n        return rules;\n    };\n\n    return RuleSet;\n\n}\n\nangular.module('gameOfLife')\n    .factory('RuleSet', RuleSet);","function ArrayUtils() {\n\n    return {\n\n        makeArray: function(w, h, val) {\n            var arr = [];\n            var i, j;\n            for (i = 0; i < w; i++) {\n                arr[i] = [];\n                for (j = 0; j < h; j++) {\n                    arr[i][j] = val;\n                }\n            }\n            return arr;\n        },\n\n        makeArray1: function(size, value) {\n            var arr = [];\n            var i;\n            for (i = 0; i < size; i++) {\n                arr[i] = value;\n            }\n            return arr;\n        }\n\n    };\n\n}\n\nangular.module('gameOfLife')\n    .factory('arrayUtils', ArrayUtils);","function BrushFactory(Brush, arrayUtils) {\n\n    return {\n        square: function() {\n            var brush = new Brush(11);\n            brush.pattern[5][5] = true;\n            return brush;\n        },\n        eraser: function() {\n            var brush = new Brush(11);\n            brush.pattern[5][5] = false;\n            return brush;\n        },\n        cross: function() {\n            var brush = new Brush(11);\n            brush.pattern[5][4] = true;\n            brush.pattern[4][5] = true;\n            brush.pattern[5][5] = true;\n            brush.pattern[6][5] = true;\n            brush.pattern[5][6] = true;\n            return brush;\n        },\n        missile: function() {\n            var brush = new Brush(11);\n            brush.pattern[6][6] = true;\n            brush.pattern[6][5] = true;\n            brush.pattern[6][4] = true;\n            brush.pattern[5][4] = true;\n            brush.pattern[4][5] = true;\n            return brush;\n        },\n        custom: function() {\n            return new Brush(11);\n        }\n    };\n\n}\n\nangular.module('gameOfLife')\n    .factory('brushFactory', BrushFactory);","function CanvasService() {\n\n    var canvasId = 'lifeStage';\n\n    var canvas;\n    var ctx;\n\n    var offscreenCanvas;\n    var offscreenCtx;\n\n    function setBlack(data, x, y) {\n        var index = (y * data.width + x) * 4;\n        data.data[index] = 0;\n        data.data[index + 1] = 0;\n        data.data[index + 2] = 0;\n        data.data[index + 3] = 255;\n    }\n\n    function setWhite(data, x, y) {\n        var index = (y * data.width + x) * 4;\n        data.data[index] = 255;\n        data.data[index + 1] = 255;\n        data.data[index + 2] = 255;\n        data.data[index + 3] = 255;\n    }\n\n    return {\n        init: function(width, height) {\n            canvas = document.getElementById(canvasId);\n            canvas.width = width;\n            canvas.height = height;\n            ctx = canvas.getContext('2d');\n            ctx.imageSmoothingEnabled = false;\n        },\n        resize: function(width, height) {\n            canvas.width = width;\n            canvas.height = height;\n        },\n        updateCanvas: function(lifeState) {\n            offscreenCanvas = $('<canvas>')\n                .attr('width', lifeState.width)\n                .attr('height', lifeState.height)[0];\n            offscreenCtx = offscreenCanvas.getContext('2d');\n            var imageData = offscreenCtx.createImageData(lifeState.width, lifeState.height);\n            var i, j;\n            for (i = 0; i < lifeState.width; i++) {\n                for (j = 0; j < lifeState.height; j++) {\n                    if (lifeState.getField(i, j)) {\n                        setBlack(imageData, i, j);\n                    } else {\n                        setWhite(imageData, i, j);\n                    }\n                }\n            }\n            offscreenCtx.putImageData(imageData, 0, 0);\n            ctx.scale(canvas.width / lifeState.width, canvas.height / lifeState.height);\n            ctx.drawImage(offscreenCanvas, 0, 0);\n            ctx.setTransform(1, 0, 0, 1, 0, 0);\n        },\n        getMousePos: function(evt) {\n            var rect = canvas.getBoundingClientRect();\n            return {\n                x: evt.clientX - rect.left,\n                y: evt.clientY - rect.top\n            };\n        }\n    };\n}\n\nangular.module('gameOfLife')\n    .factory('canvasService', CanvasService);","function FrameRateService() {\n\n    var frameCountLimit = 30;\n\n    var frameEndTimes;\n\n    return {\n        reset: function() {\n            frameEndTimes = [];\n            var frameEndTime = new Date()\n                .getTime();\n            frameEndTimes.push(frameEndTime);\n        },\n        next: function() {\n            var newEndTime = new Date()\n                .getTime();\n            frameEndTimes.push(newEndTime);\n            if (frameEndTimes.length > frameCountLimit) {\n                frameEndTimes.shift();\n            }\n            return Math.floor(1 / ((newEndTime - frameEndTimes[0]) / 1000) * frameEndTimes.length);\n        }\n    };\n\n}\n\nangular.module('gameOfLife')\n    .factory('frameRateService', FrameRateService);","function GameController($scope, $interval, gameStateFactory, canvasService, RuleSet, frameRateService, brushFactory) {\n\n    var self = this;\n\n    var intervalId;\n\n    var canvasWidth = 512;\n    var canvasHeight = 512;\n\n    var gameWidth = 256;\n    var gameHeight = 256;\n\n    self.selectedRules = null;\n\n    self.tickerButtonText = 'Start';\n\n    self.fps = 25;\n    self.realFps = 0;\n\n    self.brush = null;\n    self.brushScale = 1;\n\n    self.gameRunning = false;\n\n    self.availableStates = {\n        empty: gameStateFactory.createEmptyState,\n        line: gameStateFactory.createLineState,\n        random: gameStateFactory.createRandomState\n    };\n    self.availableRules = {\n        conway: '23/3',\n        seed: '/2',\n        ameba: '1358/357',\n        daynight: '34678/3678',\n        longlife: '5/345',\n        coral: '45678/3',\n        '34': '34/34',\n        diameba: '5678/35678',\n        highlife: '23/36',\n        replicator: '1357/1357',\n        labirynth: '12345/3',\n        cancer: '1/1',\n        petals: '012345678/3',\n        wolfram: '018/018',\n        traycloth: '/234',\n        coagulation: '235678/378',\n        pseudolife: '238/357'\n    };\n    self.availableBrushes = {\n        eraser: brushFactory.eraser,\n        square: brushFactory.square,\n        cross: brushFactory.cross,\n        missile: brushFactory.missile,\n        custom: brushFactory.custom\n    };\n    self.selectedRuleSet = 'conway';\n    self.selectedBrush = 'custom';\n    self.selectedState = 'empty';\n\n    var gameState = null;\n\n    init();\n\n    function init() {\n        gameState = gameStateFactory.createEmptyState(gameWidth, gameHeight);\n        canvasService.init(canvasWidth, canvasHeight);\n        canvasService.updateCanvas(gameState);\n        setRulesByName('conway');\n        self.brush = self.availableBrushes['custom']();\n    }\n\n    function setRulesByName(ruleSetName) {\n        var textRules = self.availableRules[ruleSetName];\n        var ruleSet = RuleSet.parseText(textRules);\n        self.selectedRules = ruleSet;\n    }\n\n    self.handleFpsChange = function() {\n        if (intervalId !== undefined) {\n            stop();\n            start(self.fps);\n        }\n    };\n\n    self.loadRulePreset = function() {\n        var ruleText = self.availableRules[self.selectedRuleSet];\n        self.selectedRules = RuleSet.parseText(ruleText);\n    };\n\n    self.handleSetStateButton = function() {\n        var factory = self.availableStates[self.selectedState];\n        setLifeData(factory(gameWidth, gameHeight));\n    };\n\n    self.handleTickerButton = function() {\n        if (intervalId !== undefined) {\n            stop();\n            self.tickerButtonText = 'Start';\n        } else {\n            start(self.fps);\n            self.tickerButtonText = 'Stop';\n        }\n    };\n\n    self.handleCanvasClick = function(e) {\n        var pos = canvasService.getMousePos(e);\n        canvasBrushPaint(pos);\n    };\n\n    self.handleCanvasMove = function(e) {\n        if (detectLeftButton(e)) {\n            var pos = canvasService.getMousePos(e);\n            canvasBrushPaint(pos);\n        }\n    };\n\n    function canvasBrushPaint(position) {\n        var x = Math.floor(parseInt(position.x) * (gameWidth / canvasWidth));\n        var y = Math.floor(parseInt(position.y) * (gameHeight / canvasHeight));\n        paint(gameState, x, y, self.brush);\n        canvasService.updateCanvas(gameState);\n    }\n\n    self.performStep = function() {\n        gameState = gameState.updateLife(self.selectedRules);\n        canvasService.updateCanvas(gameState);\n    };\n\n    self.changeBrush = function(event, x, y) {\n        if (detectLeftButton(event) && event.ctrlKey) {\n            self.brush.pattern[x][y] = null;\n        } else if (detectRightButton(event)) {\n            self.brush.pattern[x][y] = false;\n        } else if (detectLeftButton(event)) {\n            self.brush.pattern[x][y] = true;\n        }\n    };\n\n    self.brushMoveChange = function(event, x, y) {\n        self.changeBrush(event, x, y);\n    };\n\n    self.loadBrush = function() {\n        self.brush = self.availableBrushes[self.selectedBrush]();\n    };\n\n    function start(fps) {\n        frameRateService.reset();\n        self.gameRunning = true;\n        intervalId = $interval(step, 1000 / fps);\n    }\n\n    function stop() {\n        if (angular.isDefined(intervalId)) {\n            self.gameRunning = false;\n            $interval.cancel(intervalId);\n            intervalId = undefined;\n        }\n        self.realFps = 0;\n    }\n\n    function step() {\n        setLifeData(gameState.updateLife(self.selectedRules));\n        self.realFps = frameRateService.next();\n    }\n\n    function setLifeData(data) {\n        gameState = data;\n        canvasService.updateCanvas(data);\n    }\n\n    function detectLeftButton(evt) {\n        if (evt.buttons !== undefined) {\n            return evt.buttons === 1;\n        }\n        return evt.which === 1;\n    }\n\n    function detectRightButton(evt) {\n        if (evt.buttons !== undefined) {\n            return evt.buttons === 2;\n        }\n        return evt.which === 3;\n    }\n\n    function paint(lifeState, x, y, brush) {\n        var scaledSize = brush.size * self.brushScale;\n        var baseX = x - Math.floor(scaledSize / 2);\n        var baseY = y - Math.floor(scaledSize / 2);\n        var i, j;\n        for (i = 0; i < scaledSize; i++) {\n            for (j = 0; j < scaledSize; j++) {\n                var patternX = Math.floor(i / self.brushScale);\n                var patternY = Math.floor(j / self.brushScale);\n                var stateX = baseX + i;\n                var stateY = baseY + j;\n                if (stateX > -1 && stateX < lifeState.width && stateY > -1 && stateY < lifeState.height) {\n                    if (brush.pattern[patternX][patternY] != null) {\n                        lifeState.setField(stateX, stateY, brush.pattern[patternX][patternY]);\n                    }\n                }\n            }\n        }\n    }\n\n}\n\nangular.module('gameOfLife')\n    .controller('GameController', GameController);","/* Setup Rounting For All Pages */\nangular.module('gameOfLife')\n    .config(function($stateProvider, $urlRouterProvider) {\n\n        // Redirect any unmatched url\n        $urlRouterProvider.otherwise('/');\n\n        $stateProvider\n            .state('game', {\n                url: '/',\n                templateUrl: 'game/game.html',\n                controller: 'GameController as gameController'\n            });\n\n    });","function GameStateFactory(LifeState, arrayUtils) {\n    return {\n        createEmptyState: function(width, height) {\n            return new LifeState(arrayUtils.makeArray(width + 2, height + 2, false), width, height);\n        },\n        createLineState: function(width, height) {\n            var state = arrayUtils.makeArray(width + 2, height + 2, false);\n            var i;\n\n            for (i = 1; i < width + 1; i++) {\n                state[i][i] = true;\n            }\n            // state[201][202] = true;\n            return new LifeState(state, width, height);\n        },\n        createRandomState: function(width, height) {\n            var state = LifeState.build(width, height);\n            var i, j;\n            for (i = 0; i < width; i++) {\n                for (j = 0; j < height; j++) {\n                    state.setField(i, j, Math.random() < 0.5);\n                }\n            }\n            return state;\n        }\n    };\n}\n\nangular.module('gameOfLife')\n    .factory('gameStateFactory', GameStateFactory);","function rangeFilter() {\n    return function(n) {\n        var res = [];\n        for (var i = 0; i < n; i++) {\n            res.push(i);\n        }\n        return res;\n    };\n}\n\nangular.module('gameOfLife')\n    .filter('range', rangeFilter);"],"sourceRoot":"/source/"}